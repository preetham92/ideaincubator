// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id        String   @id 
  username  String   @unique
  displayName String
  email     String?  @unique
  password  String
  name      String?
  googleId  String?  @unique
  avatarUrl String?
  bio       String?
  createdAt DateTime @default(now())

  sessions  Session[]
  posts     Post[]
  followers Follow[] @relation("following")
  following Follow[] @relation("followers")
  likes     Like[]
  comments  Comment[]

  @@map("users")
}

model Session {
  id        String   @id 
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade )

  @@map("sessions")
}

model Post {
  id       String    @id @default(cuid())
  content  String
  topic    String?
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade )
  createdAt DateTime @default(now())

  likes    Like[]
  comments Comment[]

  @@map("posts")
}

model Like {
  id       String   @id @default(cuid())
  userId   String
  postId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id       String   @id @default(cuid())
  content  String
  userId   String
  postId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comments")
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}
