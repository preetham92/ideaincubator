// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id        String      @id 
  username  String      @unique
  displayName String
  email     String?   @unique
  password  String
  name      String?
  googleId  String? @unique
  avatarUrl    String?
  bio String?
  sessions Session[]
  posts Post[]
  followers   Follow[]  @relation("following")
  following   Follow[]  @relation("followers")
  
  createdAt DateTime @default(now())
  @@map("users")
}

model Session {
  id        String      @id 
  userId    String
  expiresAt DateTime
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade )
      
  
  
  @@map("sessions")
}

model Post{
  id String @id @default(cuid())
  content String
  userId String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade )

createdAt DateTime @default(now())
@@map("posts")

}
model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}